@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Shared.Enums
@using System.Timers
@using TeslaSolarCharger.Shared.Contracts
@inject HttpClient HttpClient
@inject IDateTimeProvider DateTimeProvider

@if (_issues?.Count > 0)
{
    <div class="shadow p-3 mb-5 bg-white rounded">
        <h3>Issues:</h3>
        @foreach (var issue in _issues)
        {
            <div class="alert alert-@(issue.IssueType switch
                                    {
                                        IssueType.Error => "danger",
                                        IssueType.Warning => "warning",
                                        _ => "info",
                                    })" role="alert">
                <div>@issue.IssueMessage</div>
                @if (issue.PossibleSolutions.Count > 0)
                {
                    <hr />
                    <div><strong>Possible solutions:</strong></div>
                    <ul>
                        @foreach (var solution in issue.PossibleSolutions)
                        {
                            <li>@((MarkupString)solution)</li>
                        }
                    </ul>
                }
            </div>
        }
    </div>
}


@code {
    private List<Issue>? _issues;
    private Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        await UpdateIssues().ConfigureAwait(false);

        _timer = new Timer();
        _timer.Interval = 10000;
        _timer.Elapsed += Refresh;
        _timer.Start();
    }

    private void Refresh(object? sender, ElapsedEventArgs e)
    {
        UpdateIssues().GetAwaiter().GetResult();
    }

    private async Task UpdateIssues()
    {
        var timeZoneOffset = TimeZoneInfo.Local.GetUtcOffset(DateTimeProvider.Now());
        _issues = await HttpClient.GetFromJsonAsync<List<Issue>>($"api/Issue/RefreshIssues?utcTimeZoneOffset={timeZoneOffset}");
        this.StateHasChanged();
    }

}
