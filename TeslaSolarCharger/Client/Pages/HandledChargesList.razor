@page "/HandledCharges/{carId:int}"
@using TeslaSolarCharger.Shared.Dtos.ChargingCost
@using TeslaSolarCharger.Shared.Helper.Contracts
@inject HttpClient HttpClient
@inject IStringHelper StringHelper
@inject IJSRuntime JSRuntime

<h1>Handled Charges</h1>

@if (_handledCharges == null)
{
    <div class="spinner"></div>
}
else
{
    <MudDataGrid Items="_handledCharges" Groupable="true" Filterable="true"
                 Hover="true" Dense="true" Striped="true" Virtualize="true" FixedHeader="true" FixedFooter="true"
                 Height="@datagridHeight" Breakpoint="Breakpoint.None">
        <Columns>
            <PropertyColumn Property="x => x.StartTime"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.StartTime))"></PropertyColumn>
            <PropertyColumn Property="x => x.CalculatedPrice"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.CalculatedPrice))"
                            AggregateDefinition="_calculatedPriceAggregation">
            </PropertyColumn>
            <PropertyColumn Property="x => x.PricePerKwh"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.PricePerKwh))"
                            AggregateDefinition="_pricePerKwhAggregation"></PropertyColumn>
            <PropertyColumn Property="x => x.UsedGridEnergy"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.UsedGridEnergy))"
                            AggregateDefinition="_usedEnergyAggrregation"></PropertyColumn>
            <PropertyColumn Property="x => x.UsedHomeBatteryEnergy"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.UsedHomeBatteryEnergy))"
                            AggregateDefinition="_usedEnergyAggrregation"></PropertyColumn>
            <PropertyColumn Property="x => x.UsedSolarEnergy"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.UsedSolarEnergy))"
                            AggregateDefinition="_usedEnergyAggrregation"></PropertyColumn>
        </Columns>
    </MudDataGrid>
}

@code {
    [Parameter]
    public int CarId { get; set; }

    public int ViewportWidth { get; set; }
    public int ViewportHeight { get; set; }

    private string datagridHeight = "calc(100vh - 10rem);";

    private List<DtoHandledCharge>? _handledCharges;
    private AggregateDefinition<DtoHandledCharge> _calculatedPriceAggregation = new AggregateDefinition<DtoHandledCharge>()
    {
        Type = AggregateType.Sum,
            DisplayFormat = "\u2211: {value}",
    };

    private AggregateDefinition<DtoHandledCharge> _pricePerKwhAggregation = new AggregateDefinition<DtoHandledCharge>()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var averagePricePerKwh = x.Average(z => z.PricePerKwh);
                var resultString = $"\u2300: {averagePricePerKwh:F3}";
                return resultString;
            }
        };

    private AggregateDefinition<DtoHandledCharge> _usedEnergyAggrregation = new AggregateDefinition<DtoHandledCharge>()
    {
        Type = AggregateType.Sum,
            DisplayFormat = "\u2211: {value}",
    };

    protected override async Task OnInitializedAsync()
    {
        _handledCharges = await HttpClient.GetFromJsonAsync<List<DtoHandledCharge>>($"api/ChargingCost/GetHandledCharges?carId={CarId}").ConfigureAwait(false) ?? new List<DtoHandledCharge>();
    }

    [JSInvokable]
    public void OnResize(int width, int height)
    {
        if(ViewportWidth == width && ViewportHeight == height) return;
        datagridHeight = height < 430 ? "300px" : "calc(100vh - 10rem);";
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.registerViewportChangeCallback", DotNetObjectReference.Create(this));
        }
    }
}
